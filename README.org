* HamLog
** Introduction
This is the attempt to make a console based logging application
for Ham Radio contacts.
It is meant to be simple and fast to use,
but additional useful features may be added in the future.
There are two parts:
1. The Ham library, providing functions for creating and modifying
   contact lists.
2. The hamlog user facing application.

* State of Development
This is in an early development stage, but
it should already be usable to try it out.

* Hamlog Application Usage

#+CAPTION: The user interface for the hamlog application.
#+attr_html: :width 50%
[[./doc/screenshot1.png]]

You can always get a help for command line options using
#+begin_src shell
hamlog --help
hamlog

Usage: hamlog [--cabrillo STRING] [--outfile STRING] [--config STRING]
              [--points STRING]

Available options:
  -h,--help                Show this help text
  --cabrillo STRING        Export to cabrillo; argument one of {naqp, fieldday}
  --outfile STRING         Output file for cabrillo export.
  --config STRING          hamlog.config file to use
  --points STRING          Points for a contest, one of {fieldday}
#+end_src

Start the application from a terminal without any command line arguments.
Quit the application again.
It will write a file /hamlog.config/, which you can edit.
The file is in JSON format and contains
- The name of the contacts log file
- Your callsign
- Your usual location
The file looks somewhat like this:
#+begin_src javascript
{
    "_configLogFile": "hamlog.json",
    "_configMyCallsign": "xy6abc",
    "_configMyLocation": "Santa Barbara"
}
#+end_src
This information will be inserted automatically into new contacts.

On exiting, the application also writes the contacts log file, the name of which
is configurable in /hamlog.config/.

Start the application again from the terminal and start adding contacts.
There is a small help window that will tell you which shortcut keys you can use.

* Configuring the hamlog.config file
The configuration file can be modified to
- change what the default or fixed values for some entries are
- change what is visible in the terminal UI

Take this configuration file excerpt:
#+begin_src javascript
{
    "_configLogFile": "hamlog.json",
    "_configQsoDefaults": {
        "_qsoDefaultRST": {
            "tag": "FixedValue",
            "contents": {
                "tag": "RST",
                "contents": [
                    0,
                    0,
                    0
                ]
            }
        },
        "_qsoDefaultFrequency": {
            "tag": "DefaultValue",
            "contents": 14.0582
        },
        "_qsoDefaultSentLocation": {
            "tag": "FixedValue",
            "contents": "CA"
        },
... and so on
#+end_src
The key names should be somewhat self-explanatory for Amateur Radio operators.
For example, qsoDefaultSentLocation is the location that you sent during a
contact. If that is always the same, you may want to put either a DefaultValue in there,
like in the entry for qsoDefaultFrequency above, or a FixedValue as in qsoDefaultSentLocation
above. DefaultValue means that the entry will be pre-populated with the given "contents" value,
but can be changed from the UI. FixedValue means the value will also be set to the one given in "contents",
but it will not be changeable from the UI and it will not be visible in the UI.
This feature can be used to remove entries that you want to be the same anyway
and that would just be clutter in the UI.

This can be useful for contests, when all you want to see is for example the Exchange fields, and
received callsigns.
You would then set all fields that you don't want to see to FixedValue.

For each configuration you want to use, you can simply create a new directory
and then run the application from within that directory to create a new configuration file
that you can then taylor to what you want to do, for example for another contest.

For each field that normally represents a part of an exchange in a radio contact,
there is a version containing the word "Sent" and one that does not contain "Sent".
"Sent" is the value that you have sent, and the other one is the one you received.
For example, there is "qsoDefaultSentLocation" and "qsoDefaultLocation".

* Export to Cabrillo format
You can export an existing log to Cabrillo format.
Currently, ARRL Field Day and NAQP outputs are supported.
This is done using the application from the command line, like so:
#+begin_src shell
hamlog --cabrillo fieldday --outfile test.cab
#+end_src
Don't forget to check and edit the resulting file before uploading it -- no guarantees are being made :)

* Calculating points for some contests
You can also have the application compute points for some contests.
Currently, ARRL Field Day (I know, not a contest), NAQP-CW and NAQP-SSB are supported.
Use at your own risk, all this is to the best of my knowledge.
Usage example:
#+begin_src shell
hamlog --points naqpcw
Config file read successfully.
Points total: PointsNAQP {pnaqpPointsPerBand = [(40m,6.0,7.0),(20m,9.0,10.0)], pnaqpTotalPoints = 132.0}
#+end_src
or
#+begin_src shell
hamlog --points fieldday
Config file read successfully.
Points total: FieldDayPoints {fdpTotal = 168.0, fdpPowerMult = 2.0, fdpBonus = 100.0, fdpQsos = [("CW",[("40m",7),("20m",10)]),("PH",[]),("DATA",[])]}
#+end_src
The output looks somewhat raw, but it's fairly straighforward to read. Since the Field Day web entry forms are expecting the number of contacts ordered by
communications mode and band, that is what is output in addition to the computed points.
This is not fully configurable at this time and therefore not usable for everyone.
If you want to add another contest, please do so!

* Library Usage
The HamLog monad is meant as an easy to use back end to
manipulate log lists.
A usage example would be:
#+begin_src haskell
runHamLog defaultConfig emptyLogState $ do
   readLog
   q <- newQsoNow
   updateQso 0 $ q { _qsoFreqency = MHz 146.52,
                     _qsoNotes    = "Nice contact!" }
   writeLog
#+end_src
Note that most things in this library are subject to change still.

* Todo List
** TODO Compute distances between locations
** TODO Add Cabrillo output to Contest typeclass.
** TODO Update QSO time while typing QSO.
   Update the UTC time with e.g. CTRL-T.
** TODO End time optional
** TODO Add an ID to each QSO
   This would help to find duplicates. Until then, use everything, including date/time,
   to find actual duplicates, minus the one we are searching for.
** TODO Connection to radio
** TODO Fix callsign lookup
** TODO Search QSOs.
** TODO For searching and dupe checks, add hash table?
** TODO Tags, grouping by tags.
** TODO Multiple selection?
** TODO Scrollable notes, if necessary.
** TODO Add versioning for files and data structures. Support converting from older versions.
** TODO [#B] Multiple log files?
   - Note taken on [2018-07-28 Sat 23:06] \\
     This is simply possible by keeping log files in separate directories, along with configurations.
** DONE Sanitize QSOs when updating / creating.
   Remove leading and trailing whitespaces, possibly toUpper, etc.
** DONE Point calculation NAQP
   Add instance for Contest typeclass.
** DONE Dupe check
   - Note taken on [2020-07-07 Tue 00:21] \\
     More or less done.
** DONE Mode should stay the same for new contacts
** DONE Point calculation FieldDay
   - Note taken on [2020-06-30 Tue 23:03] \\
     Done.
** DONE [#A] Export to Cabrillo, configurable.
   - Note taken on [2020-06-30 Tue 23:00] \\
     Sort of works.
** DONE Values for exchanges at contests.
   CLOSED: [2018-07-28 Sat 23:05]
   - Note taken on [2018-07-28 Sat 23:05] \\
     Default values have been added to the config structure.
     See QsoDefaults. FixedValue means the UI does not display the value,
     DefaultValue means the UI displays it but pre-populates with the given value
     in the config file.
     This way the application can be configured to work better in contests.
